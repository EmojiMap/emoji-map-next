// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // Add previewFeatures to enable better connection handling
  previewFeatures = ["metrics"]
  // Add engineType to help with connection issues
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  // Use only the non-pooling URL to disable connection pooling
  url      = env("POSTGRES_URL_NON_POOLING")
  // Remove directUrl since we're using the non-pooling URL directly
}

//
model User {
  id        String     @id @unique
  email     String     @unique
  username  String?
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  favorites Favorite[] // Relation to favorite places
  ratings   Rating[] // Relation to ratings for this user

  @@index([id])
}

model Place {
  id          String     @id @default(cuid())
  name        String?
  description String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  favorites   Favorite[] // Relation to users who favorited this place
  ratings     Rating[] // Relation to ratings for this place

  @@index([name])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  placeId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  place Place @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([userId, placeId]) // Prevents duplicate favorites
  @@index([userId])
  @@index([placeId])
}

model Rating {
  id        String   @id @default(cuid())
  userId    String
  placeId   String
  rating    Int // Rating value (e.g., 1-5, validated in application code)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  place Place @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([userId, placeId]) // Prevents duplicate ratings from same user for same place
  @@index([userId])
  @@index([placeId])
}

// Working towards having the mapping of the emoji to the key the db 
// will use to match the place to the category in a db
// Currently CATEGORY_MAP is used locally and redefined in the iOS client
model Category {
  id       Int      @id
  emoji    String   @unique
  name     String   @unique
  keywords String[]
}
